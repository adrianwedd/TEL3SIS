# jsonschema: |
#   {
#     "$schema": "http://json-schema.org/draft-07/schema#",
#     "type": "array",
#     "items": {
#       "type": "object",
#       "required": ["id","description","dependencies","priority","status"],
#       "properties": {
#         "id": {"type": "integer"},
#         "description": {"type": "string"},
#         "component": {"type": "string"},
#         "dependencies": {"type": "array","items": {"type": "integer"}},
#         "priority": {"type": "integer","minimum": 1, "maximum": 5},
#         "status": {"type": "string","enum": ["pending","in_progress","in_review","blocked","done"]},
#         "command": {"type": ["string", "null"]},
#         "task_id": {"type": "string"},
#         "title": {"type": "string"},
#         "area": {"type": "string"},
#         "actionable_steps": {"type": "array", "items": {"type": "string"}},
#         "acceptance_criteria": {"type": "array", "items": {"type": "string"}},
#         "assigned_to": {"type": ["string", "null"]},
#         "epic": {"type": "string"}
#       }
#     }
#   }

tasks:
  - id: 1
    task_id: INIT-00
    epic: "Phase 0: Initialization"
    title: "Set up project directory and file structure"
    description: "Create folders for server, agents, scripts, and config. Prepare Docker and Flask scaffolding."
    component: infrastructure
    area: Setup
    dependencies: []
    priority: 1
    status: done
    assigned_to: null
    command: "mkdir -p server agents scripts recordings/audio recordings/transcripts"
    actionable_steps:
      - "Create root project directory."
      - "Create subdirectories: /server, /agents, /scripts, /recordings."
      - "Add initial Dockerfile, docker-compose.yml, and requirements.txt."
    acceptance_criteria:
      - "The specified directory structure exists in the repository."
      - "A basic Dockerfile and docker-compose.yml are present."
  - id: 2
    task_id: INIT-01
    epic: "Phase 0: Initialization"
    title: "Configure .env and environment secrets"
    description: "Create a .env file using .env.example and securely populate credentials for Twilio, OpenAI, etc."
    component: config
    area: Setup
    dependencies: [1]
    priority: 1
    status: done
    assigned_to: null
    command: "cp .env.example .env"
    actionable_steps:
      - "Create a .env.example file listing all required environment variables."
      - "Create the .env file and add it to .gitignore."
      - "Populate the .env file with valid credentials."
    acceptance_criteria:
      - "The application can successfully load all required secrets from the environment."
  - id: 3
    task_id: INIT-02
    epic: "Phase 0: Initialization"
    title: "Implement latency logger with loguru"
    description: "Instrument STT → LLM → TTS roundtrip using loguru and record structured latency metrics."
    component: agent
    area: Ops
    dependencies: [1]
    priority: 3
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Add loguru to requirements.txt."
      - "Wrap Vocode's STT, LLM, and TTS handlers to log timestamps before and after each step."
      - "Output structured JSON logs containing call_sid and latency_ms for each step."
    acceptance_criteria:
      - "During a call, latency logs are printed to the console in a structured format."
  - id: 4
    task_id: INIT-03
    epic: "Phase 0: Initialization"
    title: "Add STT warm-up daemon for Whisper"
    description: "Build a background process to preload Whisper models and maintain readiness to reduce cold start time. Note: Can be deferred until post-MVP to prioritize stable call flow."
    component: agent
    area: Performance
    dependencies: [1]
    priority: 5
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Create a script to initialize a Whisper model in memory."
      - "Integrate this script into the application's startup process."
    acceptance_criteria:
      - "The first call received after server start has significantly reduced STT latency."
  - id: 5
    task_id: INIT-04
    epic: "Phase 0: Initialization"
    title: "Build minimal Vocode Flask app with Twilio webhook"
    description: "Implement Flask app with `/inbound_call` route to handle Twilio requests and return basic voice responses."
    component: server
    area: Core Logic
    dependencies: [1, 2]
    priority: 1
    status: done
    assigned_to: null
    command: "flask --app server.app run"
    actionable_steps:
      - "Create server/app.py with a Flask application."
      - "Import and configure Vocode's TelephonyServer."
      - "Implement the /inbound_call endpoint to handle POST requests from Twilio."
    acceptance_criteria:
      - "The Flask server runs without errors."
      - "Hitting the /inbound_call endpoint returns a valid TwiML response for Vocode."
  - id: 6
    task_id: CORE-01
    epic: "Phase 1: Core Telephony Agent"
    title: "Create core conversational agent configuration"
    description: "Define initial ChatGPT agent with voice, transcriber, and personality configs."
    component: agent
    area: Core Logic
    dependencies: [1, 2]
    priority: 1
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create agents/core_agent.py."
      - "Define a function that returns a Vocode AgentConfig object."
      - "Configure the agent with a prompt preamble, STT provider, and TTS provider."
    acceptance_criteria:
      - "The function returns a valid Vocode agent configuration object without errors."
  - id: 7
    task_id: CORE-02
    epic: "Phase 1: Core Telephony Agent"
    title: "Set up local microphone/speaker test script"
    description: "Enable local dev testing of the agent using dev_test_call.py."
    component: tools
    area: Setup
    dependencies: [6]
    priority: 2
    status: done
    assigned_to: null
    command: "python scripts/dev_test_call.py"
    actionable_steps:
      - "Create scripts/dev_test_call.py."
      - "Import the core agent configuration."
      - "Use Vocode's StreamingConversation to wire up local mic/speaker."
    acceptance_criteria:
      - "Running the script starts a live conversation with the AI agent through the local machine's audio devices."
  - id: 8
    task_id: CORE-03
    epic: "Phase 1: Core Telephony Agent"
    title: "Handle incoming call, STT, TTS, and response"
    description: "Integrate agent into Twilio call handler to enable real-time AI conversation."
    component: server
    area: Core Logic
    dependencies: [5, 6]
    priority: 1
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "In server/app.py, import the core agent configuration."
      - "Pass the agent configuration to the TelephonyServer within the /inbound_call handler."
    acceptance_criteria:
      - "When a call is received via Twilio, the agent's initial greeting is spoken."
      - "The agent can hold a real-time conversation with the caller."
  - id: 9
    task_id: CORE-04
    epic: "Phase 1: Core Telephony Agent"
    title: "Enable and store call recordings"
    description: "Use Twilio settings to record audio and persist locally or to a specified path."
    component: telephony
    area: Data
    dependencies: [8]
    priority: 2
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Set `record=True` in the TwilioConfig object in the call handler."
      - "Implement a webhook to receive recording status updates from Twilio."
      - "Write a function to download the audio file from the provided URL to /recordings/audio."
    acceptance_criteria:
      - "After a call completes, an audio file of the conversation is saved locally."

  - id: 35
    task_id: CORE-04A
    epic: "Phase 1: Core Telephony Agent"
    title: "Implement recording status webhook"
    description: "Create /recording_status endpoint to handle Twilio recording callbacks."
    component: telephony
    area: Data
    dependencies: [9]
    priority: 2
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Add new Flask route `/recording_status`."
      - "Update Twilio Console to call this route."
      - "Store recording SID and URL in Redis session."
    acceptance_criteria:
      - "Recording callback hits the endpoint and data is logged without errors."
  - id: 10
    task_id: CORE-05
    epic: "Phase 1: Core Telephony Agent"
    title: "Transcribe call audio after hangup"
    description: "Use Whisper or Deepgram to generate a transcript file from recorded audio."
    component: agent
    area: Data
    dependencies: [9, 12]
    priority: 2
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Create a function that takes a call recording file as input."
      - "Use a transcription library to process the audio."
      - "Save the resulting text to /recordings/transcripts."
      - "Integrate this into an async background task queue (e.g., Celery)."
    acceptance_criteria:
      - "For every audio recording, a corresponding text transcript is generated and saved."
  - id: 11
    task_id: CORE-06
    epic: "Phase 1: Core Telephony Agent"
    title: "Send transcript and audio to user via email/SMS"
    description: "Send a message with call summary and attached transcript/audio using SMTP or Twilio Notify."
    component: tools
    area: UX
    dependencies: [10, 12]
    priority: 3
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Integrate an email (e.g., SendGrid) or SMS (Twilio) client."
      - "After transcription, trigger a notification function."
      - "The function should send a message with the transcript attached or linked."
    acceptance_criteria:
      - "A notification is sent to a pre-defined recipient after a call is fully processed."
  - id: 12
    task_id: MEM-01
    epic: "Phase 2: Tool Integration"
    title: "Add Redis support for short-term state tracking"
    description: "Store session data like caller ID, recent utterances, and agent actions. Required before any tool use."
    component: state
    area: Infrastructure
    dependencies: [5]
    priority: 1
    status: done
    assigned_to: null
    command: "docker-compose up redis"
    actionable_steps:
      - "Add Redis to the docker-compose.yml file."
      - "Install redis-py library."
      - "Create a state manager class that connects to Redis."
      - "In the call handler, create a new session in Redis for each call."
    acceptance_criteria:
      - "A Redis container is running and accessible by the Flask app."
      - "When a call starts, a new key is created in Redis for that session."
  - id: 13
    task_id: TOOL-01
    epic: "Phase 2: Tool Integration"
    title: "Add OpenAI function-calling support to agent"
    description: "Enable agent to use structured tool calls via JSON schema-based functions."
    component: agent
    area: Core Logic
    dependencies: [6, 12]
    priority: 2
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Update ChatGPTAgentConfig to include a `functions` list with JSON schemas."
      - "Implement the agent's `handle_function_call` method to parse tool requests."
    acceptance_criteria:
      - "The agent correctly identifies when a user's request should trigger a tool."
      - "The `handle_function_call` method is successfully invoked."
  - id: 14
    task_id: TOOL-02
    epic: "Phase 2: Tool Integration"
    title: "Integrate simple tool: weather API"
    description: "Add first tool plugin to validate toolchain logic with minimal dependencies."
    component: tools
    area: Tooling
    dependencies: [13]
    priority: 2
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create a tools/weather.py module with a function to call a weather API."
      - "Add logic to the agent's function handler to call this function."
      - "Format the API result into a human-readable string for the LLM."
    acceptance_criteria:
      - "When a user asks for the weather, the agent successfully calls the API and provides an accurate report."
  - id: 15
    task_id: TOOL-03
    epic: "Phase 2: Tool Integration"
    title: "Build Google Calendar tool with OAuth"
    description: "Authenticate users via OAuth and enable agent to schedule events using Google Calendar API."
    component: tools
    area: Tooling
    dependencies: [13, 16]
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Set up a Google Cloud Platform project with OAuth 2.0 credentials."
      - "Implement the OAuth flow (consent screen, callback URL)."
      - "Write functions to create/read calendar events using the google-api-python-client."
    acceptance_criteria:
      - "The agent can successfully create a calendar event on behalf of an authenticated user."
  - id: 16
    task_id: TOOL-04
    epic: "Phase 2: Tool Integration"
    title: "Store refresh tokens and OAuth metadata"
    description: "Persist access tokens securely with expiration and refresh logic. Tokens must be encrypted before storage."
    component: state
    area: Security
    dependencies: [12]
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Use a library like `cryptography` to encrypt tokens."
      - "Extend the state manager to store encrypted tokens associated with a user."
      - "Implement logic to use refresh tokens to get new access tokens when they expire."
    acceptance_criteria:
      - "OAuth tokens are stored in an encrypted format."
      - "The system can maintain persistent access to the Google Calendar API."
  - id: 17
    task_id: TOOL-05
    epic: "Phase 2: Tool Integration"
    title: "Implement fallback for tool auth failure"
    description: "Add conversational fallback: “I'll text you a link” for tool auth issues."
    component: agent
    area: UX
    dependencies: [13]
    priority: 2
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "In the tool-handling logic, add error handling for authentication failures."
      - "If auth fails, the agent's next response should be the fallback message."
      - "Trigger a notification (SMS) with the authentication link."
    acceptance_criteria:
      - "When a tool requiring auth is used by an unauthenticated user, the agent responds with the correct fallback message."
  - id: 18
    task_id: FWD-01
    epic: "Phase 3: Call Forwarding + Handoff"
    title: "Add escalation triggers based on keywords"
    description: "Enable agent to detect urgency and escalate call to human. For MVP, implement only keyword-based triggers."
    component: agent
    area: UX
    dependencies: [8]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create a list of escalation keywords."
      - "In the agent's main loop, check each user utterance against the keyword list."
      - "If a keyword is detected, set an internal state to `escalation_required`."
    acceptance_criteria:
      - "The agent correctly identifies when a user has spoken an escalation keyword."
  - id: 19
    task_id: FWD-02
    epic: "Phase 3: Call Forwarding + Handoff"
    title: "Summarize conversation before handoff"
    description: "Generate a 'whisper summary' and convert to speech for context transfer."
    component: agent
    area: UX
    dependencies: [18]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "When escalation is triggered, take the conversation history from Redis."
      - "Make an LLM call to summarize the text."
      - "Store the summary to be used in the handoff."
    acceptance_criteria:
      - "A concise summary of the conversation is generated upon escalation."
  - id: 20
    task_id: FWD-03
    epic: "Phase 3: Call Forwarding + Handoff"
    title: "Forward live call to mobile number"
    description: "Use Twilio `<Dial>` logic to connect the user with the human after handoff."
    component: telephony
    area: Core Logic
    dependencies: [19]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create logic to return a TwiML response instead of letting Vocode handle it."
      - "When `escalation_required`, return a TwiML response containing a `<Dial>` verb pointed to a number from .env."
    acceptance_criteria:
      - "After an escalation is triggered, the call is successfully transferred to the specified phone number."
  - id: 21
    task_id: FWD-04
    epic: "Phase 3: Call Forwarding + Handoff"
    title: "Notify user of handoff via SMS/email"
    description: "Send context summary to human before/while forwarding the call."
    component: tools
    area: UX
    dependencies: [19, 20]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Just before returning the `<Dial>` TwiML, use the Twilio client to send an SMS."
      - "The SMS should contain the summary generated in the previous step."
    acceptance_criteria:
      - "The human recipient receives an SMS with the call summary just before the forwarded call connects."
  - id: 22
    task_id: MEM-02
    epic: "Phase 4: State & Memory"
    title: "Persist call summaries and preferences"
    description: "Write mid/long-term user memory to SQLite/Postgres with basic schema."
    component: state
    area: Data
    dependencies: [10]
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Set up a database (e.g., SQLite)."
      - "Define a schema for a `calls` table and a `user_preferences` table."
      - "After a call is transcribed and summarized, write the record to the database."
    acceptance_criteria:
      - "Completed calls are logged as new rows in the `calls` table with an accurate summary."
  - id: 23
    task_id: MEM-03
    epic: "Phase 4: State & Memory"
    title: "Add semantic memory support with ChromaDB or pgvector"
    description: "Enable agent to recall facts or preferences based on semantic embeddings."
    component: state
    area: Data
    dependencies: [22]
    priority: 5
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Integrate a vector database (e.g., ChromaDB)."
      - "During conversations, identify key facts and generate embeddings for them."
      - "Store the embeddings and associated text in the vector DB."
      - "Create a tool for the agent to perform semantic search against this DB."
    acceptance_criteria:
      - "The agent can recall previously mentioned facts that are not in the immediate conversation context."
  - id: 24
    task_id: SAFE-01
    epic: "Phase 5: Safety & Reflection"
    title: "Implement Safety Oracle function"
    description: "Build structured evaluator to determine riskiness of a user query. This should operate as a pre-execution filter on LLM responses."
    component: agent
    area: Safety
    dependencies: [13, 12]
    priority: 4
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Define a `safety_check` internal tool."
      - "The tool makes a separate LLM call to evaluate a proposed response for safety."
      - "Modify the agent's logic to generate a response, pass it to the `safety_check`, and only proceed if the check passes."
    acceptance_criteria:
      - "Potentially harmful responses are intercepted before being sent to TTS."
      - "When a response is blocked, a safe, generic message is delivered instead."
  - id: 25
    task_id: SAFE-02
    epic: "Phase 5: Safety & Reflection"
    title: "Red-team simulation engine"
    description: "Simulate adversarial prompts against the agent and log failure points."
    component: tools
    area: Safety
    dependencies: [8]
    priority: 5
    status: done
    assigned_to: null
    command: "python scripts/red_team.py"
    actionable_steps:
      - "Create a list of adversarial prompts in a YAML or JSON file."
      - "Write a script that iterates through the prompts, runs them against the agent, and logs the responses."
    acceptance_criteria:
      - "The script can automatically test the agent against a suite of adversarial inputs."
  - id: 26
    task_id: SAFE-03
    epic: "Phase 5: Safety & Reflection"
    title: "Add self-reflection routine to agent"
    description: "After each call, let agent critique its own behavior, usefulness, and identify failures."
    component: agent
    area: Safety
    dependencies: [10]
    priority: 5
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "In the post-call async task, add a step after transcription."
      - "Make an LLM call with the full transcript, asking it to critique its own performance based on a rubric."
      - "Store this self-reflection in the `calls` table in the database."
    acceptance_criteria:
      - "Each call record in the database includes a 'self_critique' field populated by the LLM."
  - id: 27
    task_id: UI-01
    epic: "Phase 6: UI + Ops (Optional)"
    title: "Create basic dashboard to list transcripts and recordings"
    description: "Build Flask or React UI to manage and review past conversations."
    component: ui
    area: Ops
    dependencies: [22]
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create a new Flask blueprint for the dashboard."
      - "Create an endpoint that queries the `calls` table from the database."
      - "Render the results in an HTML template showing a list of calls."
    acceptance_criteria:
      - "A web page is available that lists all past conversations."
  - id: 28
    task_id: UI-02
    epic: "Phase 6: UI + Ops (Optional)"
    title: "Add search, playback, and call metadata view"
    description: "Let user filter past calls by user, topic, duration, tool usage."
    component: ui
    area: Ops
    dependencies: [27]
    priority: 5
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add a search form to the dashboard."
      - "Create a detailed view page for a single call."
      - "Embed an HTML5 audio player to play back the recording."
      - "Display the full transcript and other metadata."
    acceptance_criteria:
      - "Users can search for calls and view a detailed page with playback and transcription for each call."
  - id: 29
    task_id: UI-03
    epic: "Phase 6: UI + Ops (Optional)"
    title: "Add RBAC for admin access and logs"
    description: "Implement role-based access control for operational privacy."
    component: ui
    area: Security
    dependencies: [27]
    priority: 5
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Integrate a user management library like Flask-Login."
      - "Add a `role` column to a `users` table."
      - "Protect dashboard endpoints, requiring a specific role to access them."
    acceptance_criteria:
      - "Unauthorized users cannot access the call dashboard."
  - id: 30
    task_id: OPS-01
    epic: "Phase 1: Core Telephony Agent"
    title: "Introduce Celery worker & docker‑compose service"
    description: "Add Celery plus Redis broker to handle async tasks like transcription and notifications."
    component: infrastructure
    area: Ops
    dependencies: [5, 12]
    priority: 2
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Add Celery to requirements.txt."
      - "Create celery_app.py and configure Redis as broker/back‑end."
      - "Add a `celeryworker` service to docker-compose.yml."
      - "Refactor CORE‑05 and CORE‑06 steps to call Celery tasks."
    acceptance_criteria:
      - "Celery worker starts via docker‑compose and can run a sample task."

  - id: 31
    task_id: OPS-02
    epic: "Phase 0: Initialization"
    title: "Add encryption libs to Docker image"
    description: "Install `cryptography` and OS libs (libssl-dev) for secure token storage."
    component: infrastructure
    area: Security
    dependencies: [1]
    priority: 3
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Add `cryptography` to requirements.txt."
      - "Modify Dockerfile to include `libssl-dev` and `build-essential`."
    acceptance_criteria:
      - "`pip install cryptography` succeeds inside container without errors."

  - id: 32
    task_id: QA-01
    epic: "Phase 0: Initialization"
    title: "Add unit tests for StateManager and TokenStore"
    description: "Ensure core persistence layers behave correctly."
    component: testing
    area: Quality
    dependencies: [12, 16]
    priority: 3
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Add pytest to requirements.txt."
      - "Write tests for Redis StateManager session lifecycle."
      - "Write tests for encrypted TokenStore CRUD."
    acceptance_criteria:
      - "`pytest` runs clean with all tests passing."

  - id: 33
    task_id: MON-01
    epic: "Phase 1: Core Telephony Agent"
    title: "Integrate Prometheus exporter for latency metrics"
    description: "Expose /metrics endpoint to scrape STT/LLM/TTS latency."
    component: infrastructure
    area: Monitoring
    dependencies: [3]
    priority: 4
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Add prometheus_client to requirements."
      - "Create Flask route /metrics."
      - "Increment counters/histograms from latency logger."
    acceptance_criteria:
      - "Prometheus can successfully scrape /metrics and display latency histograms."

  - id: 34
    task_id: SEC-01
    epic: "Phase 0: Initialization"
    title: "Add git-secrets pre‑commit hook"
    description: "Prevent accidental commit of secrets/keys."
    component: security
    area: DevOps
    dependencies: [1]
    priority: 3
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Install git-secrets and add pre‑commit config."
      - "Document usage in CONTRIBUTING.md."
    acceptance_criteria:
      - "Attempting to commit a file containing 'AWS_SECRET_ACCESS_KEY' is blocked locally."

  - id: 36
    task_id: DOC-01
    epic: "Phase 0: Initialization"
    title: "Create CONTRIBUTING.md"
    description: "Provide guidelines for code style, branch naming, PR workflow, and pre‑commit setup."
    component: documentation
    area: Governance
    dependencies: [1]
    priority: 2
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Draft CONTRIBUTING.md following Conventional Commits."
      - "Include instructions for installing pre‑commit hooks."
      - "Describe code review and CI requirements."
    acceptance_criteria:
      - "CONTRIBUTING.md renders correctly and covers style, hooks, and PR process."

  - id: 37
    task_id: DOC-02
    epic: "Phase 0: Initialization"
    title: "Add LICENSE file"
    description: "Add MIT license to the root of the repository."
    component: documentation
    area: Legal
    dependencies: [1]
    priority: 1
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Create LICENSE with MIT template."
      - "Add copyright notice for Adrian Wedd."
    acceptance_criteria:
      - "Project root contains a valid MIT LICENSE file."

  - id: 38
    task_id: CI-01
    epic: "Phase 0: Initialization"
    title: "Set up GitHub Actions CI workflow"
    description: "Add .github/workflows/ci.yml for linting, testing, and Docker build."
    component: infrastructure
    area: CI/CD
    dependencies: [32]  # requires tests
    priority: 2
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Create .github/workflows/ci.yml."
      - "Add jobs: lint (ruff), test (pytest), build (docker build)."
      - "Trigger on push and pull_request."
    acceptance_criteria:
      - "CI pipeline passes on an empty commit."

  - id: 39
    task_id: CI-02
    epic: "Phase 0: Initialization"
    title: "Set up GitHub Actions security scan"
    description: "Add .github/workflows/security.yml for secrets scanning (trufflehog)."
    component: security
    area: CI/CD
    dependencies: [34]  # git-secrets local hook
    priority: 3
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Create security.yml workflow."
      - "Install trufflehog and scan repo on PR."
    acceptance_criteria:
      - "Security scan workflow runs and reports results."

  - id: 40
    task_id: DEV-01
    epic: "Phase 0: Initialization"
    title: "Add .pre-commit-config.yaml"
    description: "Configure pre‑commit with black, ruff, and git‑secrets."
    component: tooling
    area: DevOps
    dependencies: [34]
    priority: 2
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Create .pre-commit-config.yaml with hooks."
      - "Add setup instructions in CONTRIBUTING.md."
    acceptance_criteria:
      - "Running `pre‑commit run --all-files` passes with no errors."

  - id: 41
    task_id: AGENT-01
    epic: "Phase 0: Initialization"
    title: "Scaffold CoordinatorAgent skeleton"
    description: "Create agents/coordinator.py that can parse tasks.yml, label PRs, and serialize status updates post‑merge."
    component: agents
    area: Governance
    dependencies: [38]   # CI in place
    priority: 2
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Create agents/coordinator.py with class CoordinatorAgent."
      - "Implement methods: load_tasks(), label_pr(), update_status()."
      - "Use PyGithub to interact with GitHub API."
    acceptance_criteria:
      - "CoordinatorAgent can list open tasks and comment on a dummy PR."

  - id: 42
    task_id: AGENT-02
    epic: "Phase 0: Initialization"
    title: "Implement TestCrafterPro (TC) reviewer"
    description: "Create agents/test_crafter.py to verify coverage and approve PRs if tests pass."
    component: agents
    area: Quality
    dependencies: [32, 38]
    priority: 3
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Read coverage.xml produced by CI."
      - "If coverage >= target, post `/agent TC verify_coverage`."
    acceptance_criteria:
      - "Agent posts approval comment when coverage threshold met."

  - id: 43
    task_id: AGENT-03
    epic: "Phase 0: Initialization"
    title: "Implement SafetyOracle bot"
    description: "Create agents/safety_oracle.py that runs risk checks on LLM prompts and code diff."
    component: agents
    area: Safety
    dependencies: [24, 38]
    priority: 3
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Load diff from PR."
      - "Scan for banned patterns or unsafe prompt strings."
      - "Post `/agent SO risk_ack` if safe."
    acceptance_criteria:
      - "Bot flags PRs containing unsafe content patterns."

  - id: 44
    task_id: AGENT-04
    epic: "Phase 0: Initialization"
    title: "Implement secondary CodeGenius logic reviewer"
    description: "Create agents/code_reviewer.py that attempts independent solution diff."
    component: agents
    area: Review
    dependencies: [6, 38]
    priority: 4
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Generate stub solution for task using local LLM."
      - "Semantic diff against PR code."
      - "Post `/agent CG logic_ok` if equivalence > threshold."
    acceptance_criteria:
      - "Bot produces logic_ok comment for simple tasks."

  - id: 45
    task_id: AGENT-05
    epic: "Phase 1: Core Telephony Agent"
    title: "Deploy GitHub App for CoordinatorAgent automation"
    description: "Package CoordinatorAgent as a GitHub App running via GitHub Actions or Render cron."
    component: infrastructure
    area: CI/CD
    dependencies: [41]
    priority: 3
    status: done
    assigned_to: null
    command: ""
    actionable_steps:
      - "Create .github/workflows/ca_runner.yml."
      - "Use PAT or GitHub App JWT for auth."
      - "Schedule every 10 minutes to poll PRs."
    acceptance_criteria:
      - "CoordinatorAgent automatically labels new PRs and updates tasks.yml on merge."
  - id: 46
    task_id: CORE-16
    epic: "Phase 2: Stability"
    title: "Configuration Loader"
    description: "Implement centralized configuration loading and validation for environment variables."
    component: server
    area: Core Logic
    dependencies: [45]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create server/config.py with a Config dataclass that reads required env vars."
      - "Update create_app to instantiate Config and fail fast if values are missing."
    acceptance_criteria:
      - "App startup aborts with a clear error message when mandatory variables are unset."
  - id: 47
    task_id: CORE-17
    epic: "Phase 2: Stability"
    title: "Persistent Encryption Key"
    description: "Enforce stable token encryption key in StateManager and warn if missing."
    component: server
    area: Security
    dependencies: [46]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Modify StateManager to raise an error unless TOKEN_ENCRYPTION_KEY is provided."
      - "Document migration steps in README for generating and storing this key."
    acceptance_criteria:
      - "Server refuses to start without a configured encryption key."
  - id: 48
    task_id: API-01
    epic: "Phase 2: Stability"
    title: "Versioned API with Validation"
    description: "Add API versioning and request validation for all HTTP endpoints."
    component: server
    area: Interfaces
    dependencies: [46]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Prefix existing routes with /v1/ and update clients accordingly."
      - "Use Pydantic or Marshmallow to validate inbound form and JSON data."
      - "Return structured error messages when validation fails."
    acceptance_criteria:
      - "All endpoints reject malformed requests with 4xx codes and descriptive errors."
  - id: 49
    task_id: OPS-03
    epic: "Phase 2: Stability"
    title: "Clean requirements"
    description: "Correct and pin package versions in requirements.txt."
    component: tooling
    area: DevOps
    dependencies: [45]
    priority: 2
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Remove invalid package names (e.g., 'openai - whisper')."
      - "Pin all dependencies to compatible versions."
      - "Update installation instructions accordingly."
    acceptance_criteria:
      - "`pip install -r requirements.txt` succeeds without errors."
  - id: 50
    task_id: CI-03
    epic: "Phase 2: Stability"
    title: "Pre-commit in CI"
    description: "Run pre-commit hooks as part of the GitHub Actions CI workflow."
    component: ci
    area: CI/CD
    dependencies: [49]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add a job or step in ci.yml that executes `pre-commit run --all-files`."
      - "Ensure hooks (black, ruff, git-secrets) pass before running tests."
    acceptance_criteria:
      - "Pull requests fail if pre-commit hooks report issues."

  - id: 51
    task_id: MON-02
    epic: "Phase 6: UI + Ops"
    title: "Provision Grafana dashboard"
    description: "Deploy Grafana and create dashboards for latency metrics."
    component: infrastructure
    area: Monitoring
    dependencies: [33]
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add grafana service to docker-compose.yml."
      - "Define dashboard JSON under ops/grafana/tel3sis.json."
      - "Document setup steps in README."
    acceptance_criteria:
      - "Grafana displays STT/LLM/TTS latency graphs."

  - id: 52
    task_id: MON-03
    epic: "Phase 6: UI + Ops"
    title: "Configure Prometheus alert rules"
    description: "Send Slack alerts when average latency exceeds 3s."
    component: infrastructure
    area: Monitoring
    dependencies: [33, 51]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add Prometheus rules file with latency thresholds."
      - "Use Slack webhook from .env to post alerts."
      - "Document alerting workflow."
    acceptance_criteria:
      - "Slack channel receives notifications on latency breach."

  - id: 53
    task_id: OPS-04
    epic: "Phase 2: Stability"
    title: "Container image security scanning"
    description: "Run Trivy on Docker images during CI to catch CVEs."
    component: security
    area: DevOps
    dependencies: [38]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Install trivy in security.yml workflow."
      - "Fail build if high severity CVEs are found."
    acceptance_criteria:
      - "CI fails when the container image contains critical vulnerabilities."

  - id: 54
    task_id: QA-02
    epic: "Phase 3: Call Forwarding + Handoff"
    title: "End-to-end call flow test"
    description: "Automate a Twilio call to verify recording, transcription and handoff."
    component: testing
    area: Quality
    dependencies: [20, 32]
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Use Twilio test credentials to simulate a call."
      - "Assert that recording and summary SMS occur."
    acceptance_criteria:
      - "`pytest tests/test_e2e_call.py` passes."

  - id: 55
    task_id: UI-04
    epic: "Phase 6: UI + Ops"
    title: "OAuth login for dashboard"
    description: "Secure dashboard with OAuth 2.0 login (e.g., Google)."
    component: ui
    area: Security
    dependencies: [27]
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add Flask-Login and OAuthlib packages."
      - "Implement login route and callback."
      - "Restrict dashboard routes to authenticated users."
    acceptance_criteria:
      - "Unauthenticated requests redirect to the OAuth login page."

  - id: 56
    task_id: MEM-04
    epic: "Phase 4: State & Memory"
    title: "Summarization-aware memory retrieval"
    description: "Store call summaries in the vector DB and surface them during new calls."
    component: state
    area: Data
    dependencies: [23]
    priority: 5
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create embeddings for call summaries."
      - "Update StateManager to fetch similar past summaries."
    acceptance_criteria:
      - "Agent references prior summaries relevant to the caller."

  - id: 57
    task_id: API-02
    epic: "Phase 2: Stability"
    title: "API key authentication"
    description: "Require API tokens for all /v1 endpoints."
    component: server
    area: Interfaces
    dependencies: [48]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Generate API keys and store hashed values."
      - "Validate keys on every request."
    acceptance_criteria:
      - "Requests without valid key return 401 Unauthorized."

  - id: 58
    task_id: CORE-18
    epic: "Phase 3: Call Forwarding + Handoff"
    title: "Multilingual call support"
    description: "Detect language automatically and switch STT/TTS models."
    component: agent
    area: UX
    dependencies: [6, 46]
    priority: 5
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add language detection step in the call pipeline."
      - "Load matching STT and TTS configs."
      - "Persist caller language preference."
    acceptance_criteria:
      - "Calls in multiple languages use the appropriate voices."

  - id: 59
    task_id: OPS-05
    epic: "Phase 6: UI + Ops"
    title: "Data retention cleanup job"
    description: "Periodic task to delete recordings older than 30 days."
    component: infrastructure
    area: Ops
    dependencies: [22]
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create a Celery beat schedule."
      - "Delete audio files and DB rows beyond retention window."
    acceptance_criteria:
      - "Cron job removes outdated call data automatically."

  - id: 60
    task_id: SAFE-04
    epic: "Phase 5: Safety & Reflection"
    title: "Rate limiting and abuse protection"
    description: "Throttle excessive API or call requests to prevent abuse."
    component: security
    area: Safety
    dependencies: [24, 48]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Implement IP-based rate limits using Flask-Limiter."
      - "Return 429 responses when limits are exceeded."
    acceptance_criteria:
      - "Rapid repeated requests are blocked with HTTP 429."

  - id: 61
    task_id: CORE-19
    epic: "Phase 2: Stability"
    title: "Timezone-aware datetime handling"
    description: "Replace deprecated datetime.utcnow() calls with timezone-aware datetimes."
    component: server
    area: Data
    dependencies: []
    priority: 2
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Use datetime.now(datetime.UTC) in all modules and tests."
      - "Update database models and cleanup task."
    acceptance_criteria:
      - "No DeprecationWarning about datetime.utcnow during tests."

  - id: 62
    task_id: DOC-05
    epic: "Phase 0: Initialization"
    title: "Document pre-commit hooks"
    description: "Explain how to install git hooks in README."
    component: documentation
    area: Setup
    dependencies: []
    priority: 1
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add step to Quick-Start for running `pre-commit install`."
    acceptance_criteria:
      - "README lists pre-commit installation step."
  - id: 63
    task_id: ARCH-01
    epic: "Phase 3: Stability"
    title: "Centralize environment configuration"
    description: "Load all required env vars (Redis, Database, SendGrid, etc.) via a unified Config object to avoid scattered settings."
    component: server
    area: Infrastructure
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Extend server.config.Config with fields for Redis URL, Database URL, and email/SMS credentials."
      - "Update modules that read os.environ directly to use Config."
      - "Adjust tests to supply new Config fields."
    acceptance_criteria:
      - "Application starts with a single Config object providing all needed env variables."
      - "Tests pass with updated configuration."
    epic: "Phase 3"

  - id: 64
    task_id: ARCH-02
    epic: "Phase 3: Stability"
    title: "Harden external API error handling"
    description: "Ensure tool integrations (calendar, notifications, weather) gracefully handle network failures and return user-friendly errors."
    component: tools
    area: Reliability
    dependencies: []
    priority: 2
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Wrap calls to external APIs in try/except blocks and log failures."
      - "Return consistent fallback messages when APIs are unavailable."
      - "Add unit tests simulating network errors for each tool."
    acceptance_criteria:
      - "All tools return a controlled message on connection failure."
      - "New tests validate error handling paths."
    epic: "Phase 3"

  - id: 65
    task_id: ARCH-03
    epic: "Phase 4: Performance"
    title: "Add indexes for call history queries"
    description: "Optimize database queries in dashboard and API endpoints by adding indexes to frequently filtered columns."
    component: server
    area: Data
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create SQLAlchemy indexes on Call.created_at and Call.from_number."
      - "Add Alembic migration or script to apply indexes."
      - "Update tests to run migrations and verify performance."
    acceptance_criteria:
      - "Database schema includes indexes for common query fields."
      - "Dashboard and list_calls endpoints operate efficiently with large datasets."
    epic: "Phase 4"

  - id: 66
    task_id: DOC-06
    epic: "Phase 6: UI + Ops"
    title: "Publish API and CLI reference"
    description: "Add developer documentation listing all REST endpoints and command line tools."
    component: documentation
    area: DX
    dependencies: []
    priority: 2
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Generate a Markdown or OpenAPI spec summarizing available endpoints."
      - "Document usage examples for each CLI script."
    acceptance_criteria:
      - "README or docs folder contains a clear reference of APIs and CLI commands."

  - id: 67
    task_id: CLI-01
    epic: "Phase 6: UI + Ops"
    title: "Provide unified `tel3sis` CLI"
    description: "Bundle existing helper scripts under a single Click-based entry point."
    component: tools
    area: DX
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create `tel3sis` CLI with subcommands for `serve`, `red-team`, `warmup`, and `dev-call`."
      - "Update documentation to reference the new CLI."
    acceptance_criteria:
      - "Running `tel3sis --help` lists available subcommands."
      - "Existing scripts continue to work via the CLI."

  - id: 68
    task_id: QA-03
    epic: "Phase 6: UI + Ops"
    title: "Add integration tests for CLI and endpoints"
    description: "Exercise key CLI commands and API routes in pytest using mocked external services."
    component: testing
    area: Quality
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Use `pytest` to invoke CLI subcommands and assert expected behavior."
      - "Mock Twilio and third-party APIs to verify endpoint flows."
    acceptance_criteria:
      - "All new tests pass and cover the CLI and API surfaces."

  - id: 69
    task_id: DEV-02
    epic: "Phase 3: Stability"
    title: "Adopt pip-tools for dependency management"
    description: "Use pip-tools to maintain locked runtime and dev requirements."
    component: tooling
    area: DevOps
    dependencies: [49]
    priority: 2
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add requirements.in and requirements-dev.in."
      - "Run pip-compile to generate requirements.txt and requirements-dev.txt."
      - "Update CI and Dockerfile to install compiled requirements."
    acceptance_criteria:
      - "Pip-compile produces up-to-date locked files."
      - "CI installs from compiled requirements and passes."

  - id: 70
    task_id: OPS-06
    epic: "Phase 4: Performance"
    title: "Optimize Docker build with multi-stage and .dockerignore"
    description: "Reduce image size and build context using multi-stage builds and .dockerignore."
    component: infrastructure
    area: CI/CD
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create .dockerignore to exclude tests and docs from the build context."
      - "Refactor Dockerfile to use a builder stage and slim runtime stage."
      - "Update docker-compose and CI workflows to use the new Dockerfile."
    acceptance_criteria:
      - "Docker image size decreases and build succeeds."
      - "CI build passes with the multi-stage Dockerfile."

  - id: 71
    task_id: CI-04
    epic: "Phase 4: Performance"
    title: "Cache pip and Docker layers in CI"
    description: "Use GitHub Actions caches to speed up lint/test jobs and Docker builds."
    component: ci
    area: CI/CD
    dependencies: [38]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Configure actions/cache in ci.yml for pip wheels and Docker layers."
      - "Verify caching works across workflow runs."
    acceptance_criteria:
      - "CI completes faster on subsequent runs with cache hits."

  - id: 72
    task_id: CI-05
    epic: "Phase 6: UI + Ops"
    title: "Publish Docker image on release"
    description: "Create release workflow that builds and pushes tagged images to GHCR and attaches release notes."
    component: ci
    area: CI/CD
    dependencies: [38, 70]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add .github/workflows/release.yml triggered on push tags."
      - "Build Docker image and push to ghcr.io/tel3sis."
      - "Create GitHub release with notes and link to the image."
    acceptance_criteria:
      - "Tagging a release uploads the container image and creates a release page."

  - id: 73
    task_id: QA-04
    epic: "Phase 6: UI + Ops"
    title: "Test Docker Compose deployment"
    description: "Ensure the composed services start correctly using a CI job."
    component: testing
    area: Quality
    dependencies: [38]
    priority: 2
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Spin up docker-compose in GitHub Actions."
      - "Run health checks against the web and worker services."
    acceptance_criteria:
      - "CI job passes with all containers healthy."

  - id: 74
    task_id: REF-01
    epic: "Phase 3: Stability"
    title: "Complete FastAPI migration and remove Flask remnants"
    description: "Eliminate legacy Flask code to finalize the FastAPI transition."
    component: server
    area: Core Logic
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Remove unused Flask blueprints and app modules."
      - "Ensure FastAPI entrypoint handles all routes and middleware."
      - "Update documentation to reflect FastAPI-only implementation."
    acceptance_criteria:
      - "No Flask imports remain in the repository."
      - "Server starts and responds using FastAPI exclusively."

  - id: 75
    task_id: CONF-02
    epic: "Phase 3: Stability"
    title: "Implement centralized configuration management"
    description: "Refactor application to source settings from a single Config dataclass."
    component: config
    area: Setup
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add remaining environment variables to server.config.Config."
      - "Replace os.getenv calls with Config attributes."
      - "Adjust tests and documentation for the new configuration flow."
    acceptance_criteria:
      - "All modules import configuration solely from Config."
      - "Tests pass with updated configuration usage."

  - id: 76
    task_id: CI-06
    epic: "Phase 6: UI + Ops"
    title: "Add dependency vulnerability scanning to CI/CD"
    description: "Integrate pip-audit or a similar tool to scan Python packages for vulnerabilities on each PR."
    component: ci
    area: CI/CD
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Install pip-audit in the CI environment."
      - "Fail the workflow if high-severity issues are detected."
    acceptance_criteria:
      - "CI workflow reports dependency vulnerabilities."

  - id: 77
    task_id: PERF-02
    epic: "Phase 4: Performance"
    title: "Implement caching for LLM and external API responses"
    description: "Use Redis to cache expensive API calls, reducing latency and cost."
    component: server
    area: Performance
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add Redis caching wrapper around LLM and tool calls."
      - "Invalidate cache entries on a reasonable schedule."
    acceptance_criteria:
      - "Repeated requests hit the cache and respond faster."

  - id: 78
    task_id: DOC-07
    epic: "Phase 6: UI + Ops"
    title: "Develop production deployment guide"
    description: "Write documentation outlining recommended production setup including worker scaling and HA services."
    component: documentation
    area: Ops
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Describe deploying with multiple Celery workers and PgBouncer."
      - "Explain configuring Redis Sentinel or Cluster."
      - "Provide example cloud environment settings."
    acceptance_criteria:
      - "README or docs include a clear production deployment section."

  - id: 79
    task_id: UX-05
    epic: "Phase 5: Safety & Reflection"
    title: "Enhance end-user voice error handling"
    description: "Create friendly audio responses for common failures and integrate them into the call handler."
    component: agent
    area: UX
    dependencies: []
    priority: 2
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Record or synthesize standard error phrases."
      - "Detect common failure modes and play the appropriate response."
    acceptance_criteria:
      - "Users hear a helpful message when a tool or LLM call fails."

  - id: 80
    task_id: QA-05
    epic: "Phase 3: Stability"
    title: "Create shared `vocode` mocking utility for tests"
    description: "Consolidate duplicated vocode mocking helpers into a reusable fixture."
    component: testing
    area: Quality
    dependencies: []
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Provide a test utility that mocks vocode classes used across tests."
      - "Update existing tests to import from the new utility."
    acceptance_criteria:
      - "No duplicated vocode mock implementations remain."

  - id: 81
    task_id: CLI-02
    epic: "Phase 6: UI + Ops"
    title: "Expand CLI user management capabilities"
    description: "Add subcommands to list, delete, and update users and their preferences."
    component: tools
    area: DX
    dependencies: []
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Implement `list-users`, `delete-user`, and `update-user` subcommands."
      - "Document new commands in README and docs."
    acceptance_criteria:
      - "`tel3sis manage --help` shows all user subcommands."
      - "Tests cover each CLI action."

  - id: 82
    task_id: UIX-01
    epic: "Phase 4: Performance"
    title: "Implement latency monitoring and optimization strategy for VUI"
    description: "Track end-to-end conversation latency and optimize each stage to reduce delays."
    component: infrastructure
    area: Monitoring
    dependencies: []
    priority: 1
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add detailed latency metrics to Prometheus/Grafana."
      - "Profile STT, LLM, and TTS stages separately."
      - "Tune timeouts and caching based on observed metrics."
    acceptance_criteria:
      - "Dashboard shows average latency per conversation step."
      - "Optimizations reduce overall turn latency."

  - id: 83
    task_id: UIX-02
    epic: "Phase 6: UI + Ops"
    title: "Enhance dashboard with filtering, sorting, and pagination"
    description: "Refactor call history UI to support server-side pagination and flexible query controls."
    component: ui
    area: UX
    dependencies: []
    priority: 2
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add pagination parameters to list_calls endpoint."
      - "Provide filters for date, phone number, and error status."
      - "Allow sorting by duration and timestamp."
    acceptance_criteria:
      - "Dashboard performs well with large call volumes."

  - id: 84
    task_id: UIX-03
    epic: "Phase 6: UI + Ops"
    title: "Develop an analytical overview dashboard"
    description: "Create high-level analytics view showing call volume, duration, and tool usage trends."
    component: ui
    area: UX
    dependencies: []
    priority: 2
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Build charts for call counts over time and average duration."
      - "Visualize tool usage success and failure rates."
    acceptance_criteria:
      - "Admins can view KPIs for system health at a glance."

  - id: 85
    task_id: UIX-04
    epic: "Phase 5: Safety & Reflection"
    title: "Implement barge-in (interruption handling) in VUI"
    description: "Allow the agent to stop speaking and listen when the user interrupts."
    component: agent
    area: UX
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Detect incoming audio during playback."
      - "Stop synthesis and switch to transcribing the interruption."
    acceptance_criteria:
      - "Users can interrupt the agent naturally during a call."

  - id: 86
    task_id: UIX-05
    epic: "Phase 6: UI + Ops"
    title: "Add actionability to the dashboard"
    description: "Enable admins to delete call records or trigger re-analysis from the web UI."
    component: ui
    area: UX
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add buttons for deleting or reprocessing calls."
      - "Secure actions behind proper permissions."
    acceptance_criteria:
      - "Authorized admins can modify call records via the dashboard."

  - id: 87
    task_id: UIX-06
    epic: "Phase 6: UI + Ops"
    title: "Implement global search for call history"
    description: "Add full-text search over transcripts, summaries, and phone numbers in the dashboard."
    component: ui
    area: UX
    dependencies: []
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create search API endpoint supporting keyword queries."
      - "Integrate search bar into the dashboard UI."
    acceptance_criteria:
      - "Admins can quickly locate specific calls using search terms."
  - id: 88
    task_id: CORE-20
    epic: "Core Functionality"
    title: "Implement Intent Recognition"
    description: "Refactor the CalendarAgent to use a proper intent recognition model."
    component: agent
    area: Core
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Replace keyword matching with an intent classifier."
      - "Integrate classifier into CalendarAgent."
    acceptance_criteria:
      - "Agent detects create_event and other intents reliably."
  - id: 89
    task_id: CORE-21
    epic: "Core Functionality"
    title: "Develop Multi-Turn Dialogue State Machine"
    description: "Implement a state machine to manage conversation flow."
    component: agent
    area: Core
    dependencies: [88]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create dialogue states for gathering event details."
      - "Maintain context across user responses."
    acceptance_criteria:
      - "Agent asks clarifying questions and remembers answers."
  - id: 90
    task_id: CORE-22
    epic: "Core Functionality"
    title: "Refactor Tools for Dynamic Invocation"
    description: "Modify CalendarTool and add abstraction for dynamic tool selection."
    component: agent
    area: Core
    dependencies: [88]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create tool abstraction layer."
      - "Invoke tools based on recognized intent."
    acceptance_criteria:
      - "Agent chooses the correct tool automatically."
  - id: 91
    task_id: CORE-23
    epic: "Core Functionality"
    title: "Integrate Twilio SMS for Inbound/Outbound Messaging"
    description: "Add SMS webhook endpoint and support text commands via Twilio."
    component: server
    area: Core
    dependencies: []
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create FastAPI endpoint for incoming SMS."
      - "Send responses through Twilio API."
    acceptance_criteria:
      - "Users can interact with the agent via SMS."
  - id: 92
    task_id: CORE-24
    epic: "Core Functionality"
    title: "Design Generic Web Chat API"
    description: "Create WebSocket endpoints for real-time web chat."
    component: server
    area: Core
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Implement /chat/ws WebSocket route."
      - "Handle connection management and message flow."
    acceptance_criteria:
      - "Web clients exchange messages with the agent in real time."
  - id: 93
    task_id: CORE-25
    epic: "Core Functionality"
    title: "Implement Long-Term Memory Retrieval"
    description: "Persist conversation summaries to ChromaDB and query at new session start."
    component: agent
    area: Core
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Extend RedisStateManager to save summaries to ChromaDB."
      - "Load relevant history when a conversation begins."
    acceptance_criteria:
      - "Agent recalls previous interactions across sessions."
  - id: 94
    task_id: CORE-26
    epic: "Core Functionality"
    title: "Develop Conversation Summarization Logic"
    description: "Use an LLM to summarize conversations asynchronously."
    component: agent
    area: Core
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Trigger a Celery task after each call to summarize."
      - "Store the summary for long-term retrieval."
    acceptance_criteria:
      - "Each call ends with a stored summary."
  - id: 95
    task_id: PROD-01
    epic: "Production Readiness"
    title: "Centralize Configuration with Pydantic"
    description: "Use a validated Pydantic Settings object for all environment variables."
    component: config
    area: ProdOps
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create Settings class loading from environment."
      - "Replace os.getenv usage throughout the codebase."
    acceptance_criteria:
      - "Application fails fast when required settings are missing."
  - id: 96
    task_id: PROD-02
    epic: "Production Readiness"
    title: "Instrument Application with Prometheus Metrics"
    description: "Expose metrics for call volume, latency, and errors."
    component: server
    area: ProdOps
    dependencies: []
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add Prometheus client to FastAPI."
      - "Record metrics for key operations and external API calls."
    acceptance_criteria:
      - "Metrics endpoint provides application statistics."
  - id: 97
    task_id: PROD-03
    epic: "Production Readiness"
    title: "Build Grafana Dashboard for Monitoring"
    description: "Visualize Prometheus metrics in Grafana."
    component: infra
    area: ProdOps
    dependencies: [96]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create Grafana dashboard panels for metrics."
      - "Document dashboard URL and usage."
    acceptance_criteria:
      - "Operators can view system health in Grafana."
  - id: 98
    task_id: PROD-04
    epic: "Production Readiness"
    title: "Set Up Alertmanager for Critical Alerts"
    description: "Configure Alertmanager to notify on high error rates or latency."
    component: infra
    area: ProdOps
    dependencies: [97]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Define alert rules for Prometheus metrics."
      - "Integrate notifications with Slack or PagerDuty."
    acceptance_criteria:
      - "Critical issues trigger alerts to the team."
  - id: 99
    task_id: PROD-05
    epic: "Production Readiness"
    title: "Document and Automate Database Backup/Restore"
    description: "Provide scripts and runbook for PostgreSQL and Redis backups."
    component: db
    area: ProdOps
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Write backup and restore scripts in scripts/maintenance."
      - "Document manual and scheduled execution procedures."
    acceptance_criteria:
      - "Databases can be backed up and restored using documented steps."
  - id: 100
    task_id: PROD-06
    epic: "Production Readiness"
    title: "Harden Error Handling for All External APIs"
    description: "Implement retries and logging for external API failures."
    component: tools
    area: ProdOps
    dependencies: []
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Wrap external API calls with retry logic and timeouts."
      - "Log unrecoverable errors clearly for debugging."
    acceptance_criteria:
      - "Transient failures are retried automatically."
  - id: 101
    task_id: PROD-07
    epic: "Production Readiness"
    title: "Implement Transactional State Updates"
    description: "Use Redis transactions to ensure atomic state changes."
    component: server
    area: ProdOps
    dependencies: []
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Refactor RedisStateManager to use MULTI/EXEC."
      - "Add tests covering concurrent updates."
    acceptance_criteria:
      - "State updates remain consistent under load."
  - id: 102
    task_id: UX-01
    epic: "User Experience"
    title: "Design and Build Admin UI Frontend"
    description: "Create frontend application with login and dashboard layout."
    component: frontend
    area: UX
    dependencies: []
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Bootstrap React or Vue project for admin interface."
      - "Implement authentication and basic layout."
    acceptance_criteria:
      - "Admins can log in and see an initial dashboard."
  - id: 103
    task_id: UX-02
    epic: "User Experience"
    title: "Create Backend API for Admin UI"
    description: "Add authenticated API endpoints supporting the admin frontend."
    component: server
    area: UX
    dependencies: []
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create API routes for conversation logs and agent status."
      - "Require authentication for all admin endpoints."
    acceptance_criteria:
      - "Admin API returns data securely to the frontend."
  - id: 104
    task_id: UX-03
    epic: "User Experience"
    title: "Implement Conversation Log Viewer"
    description: "Display past conversations with summaries in the admin UI."
    component: frontend
    area: UX
    dependencies: [102, 103, 94]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Fetch conversation list and summaries from backend."
      - "Show transcript and artifacts when selecting a conversation."
    acceptance_criteria:
      - "Admins can review conversation history in the UI."
  - id: 105
    task_id: UX-04
    epic: "User Experience"
    title: "Build Agent Configuration Interface"
    description: "Allow administrators to modify agent parameters from the UI."
    component: frontend
    area: UX
    dependencies: [102, 103]
    priority: 3
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Create forms for prompt and voice settings."
      - "Persist configuration changes via backend API."
    acceptance_criteria:
      - "Agent settings can be updated without editing code."
  - id: 106
    task_id: UX-06
    epic: "User Experience"
    title: "Design Secure OAuth2 Onboarding Flow"
    description: "Implement user-facing OAuth2 flow for Google Calendar access."
    component: server
    area: UX
    dependencies: []
    priority: 4
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Display permission consent page explaining scopes."
      - "Handle token exchange and secure storage."
    acceptance_criteria:
      - "Users can connect their Google Calendar via OAuth2."
  - id: 107
    task_id: DOCS-01
    epic: "Documentation"
    title: "Generate API Documentation with OpenAPI"
    description: "Integrate FastAPI's OpenAPI generation with detailed examples."
    component: server
    area: Docs
    dependencies: []
    priority: 3
    status: pending
    assigned_to: null
    command: null
    actionable_steps:
      - "Annotate endpoints for accurate schema generation."
      - "Publish OpenAPI docs with interactive UI."
    acceptance_criteria:
      - "API documentation is accessible and complete."
  - id: 108
    task_id: DOCS-02
    epic: "Documentation"
    title: "Write Comprehensive User Guide"
    description: "Create documentation for non-technical users covering setup and usage."
    component: docs
    area: Docs
    dependencies: []
    priority: 3
    status: pending
    assigned_to: null
    command: null
    actionable_steps:
      - "Explain connecting a phone number and calendar access."
      - "Detail basic troubleshooting steps."
    acceptance_criteria:
      - "Users can follow the guide to operate TEL3SIS."
  - id: 109
    task_id: DOCS-03
    epic: "Documentation"
    title: "Create Detailed Architecture Diagram"
    description: "Add a diagram illustrating system components and interactions."
    component: docs
    area: Docs
    dependencies: []
    priority: 2
    status: pending
    assigned_to: null
    command: null
    actionable_steps:
      - "Produce an architecture image file in docs/images."
      - "Reference the diagram in the README."
    acceptance_criteria:
      - "Documentation includes a clear architecture diagram."
  - id: 110
    task_id: DOCS-04
    epic: "Documentation"
    title: "Write a Developer Onboarding Guide"
    description: "Create CONTRIBUTING.md with setup and workflow instructions."
    component: docs
    area: Docs
    dependencies: []
    priority: 3
    status: pending
    assigned_to: null
    command: null
    actionable_steps:
      - "Describe environment setup and pre-commit usage."
      - "Outline testing and PR process."
    acceptance_criteria:
      - "New developers can start contributing using the guide."
  - id: 111
    task_id: DOCS-05
    epic: "Documentation"
    title: "Document Configuration Variables"
    description: "List all environment variables and their purpose in CONFIGURATION.md."
    component: docs
    area: Docs
    dependencies: [95]
    priority: 2
    status: pending
    assigned_to: null
    command: null
    actionable_steps:
      - "Create CONFIGURATION.md describing each variable."
      - "Indicate whether variables are required or optional."
    acceptance_criteria:
      - "CONFIGURATION.md enumerates all configuration options."
  - id: 112
    task_id: OPS-07
    epic: "Phase 2: Stability"
    title: "Enforce production dependency separation"
    description: "Remove development packages from runtime requirements and update Dockerfile to install only production dependencies."
    component: tooling
    area: DevOps
    dependencies: [69]
    priority: 3
    status: pending
    assigned_to: null
    command: null
    actionable_steps:
      - "Ensure requirements.in excludes dev-only packages like pytest and fakeredis."
      - "Keep dev dependencies in requirements-dev.in."
      - "Regenerate lock files with pip-compile."
      - "Update Dockerfile to install requirements.txt only."
    acceptance_criteria:
      - "requirements.txt contains only production packages."
      - "Docker image installs runtime requirements without dev extras."

  - id: 113
    task_id: CI-07
    epic: "Phase 2: Stability"
    title: "Automate dependency lock updates"
    description: "Add a pre-commit or CI step that runs pip-compile and fails if requirements are outdated."
    component: ci
    area: CI/CD
    dependencies: [112]
    priority: 2
    status: done
    assigned_to: null
    command: null
    actionable_steps:
      - "Add pre-commit hook to run pip-compile when requirements.in files change."
      - "Update CI workflow to check that compiled requirements match."
    acceptance_criteria:
      - "Pull requests fail when requirements.txt is out of sync."

  - id: 114
    task_id: CORE-27
    epic: "Phase 2: Stability"
    title: "Refine agent error handling"
    description: "Replace broad exception handlers in SafeFunctionCallingAgent and calendar tools with specific errors and user-friendly fallbacks."
    component: agent
    area: Reliability
    dependencies: [64]
    priority: 3
    status: pending
    assigned_to: null
    command: null
    actionable_steps:
      - "Catch specific exceptions like RequestException and GoogleAPICallError."
      - "Return clear fallback messages when generation or calendar access fails."
      - "Add unit tests covering failure scenarios."
    acceptance_criteria:
      - "User receives helpful message on tool or LLM failure."
      - "Tests cover new error paths."

  - id: 115
    task_id: CONF-03
    epic: "Phase 3: Stability"
    title: "Remove direct os.environ usage"
    description: "Audit codebase to ensure all configuration goes through the Settings object."
    component: server
    area: Infrastructure
    dependencies: [63, 75]
    priority: 2
    status: pending
    assigned_to: null
    command: null
    actionable_steps:
      - "Search modules for os.environ or os.getenv calls."
      - "Refactor to use server.settings.Settings where needed."
      - "Update tests accordingly."
    acceptance_criteria:
      - "No module reads environment variables directly."

  - id: 116
    task_id: ARCH-04
    epic: "Phase 4: Performance"
    title: "Migrate to async database driver"
    description: "Replace blocking SQLAlchemy usage with an async-compatible ORM using asyncpg."
    component: server
    area: Data
    dependencies: []
    priority: 4
    status: pending
    assigned_to: null
    command: null
    actionable_steps:
      - "Introduce async database engine using asyncpg."
      - "Refactor database models and queries to use an async ORM."
      - "Update API handlers to await DB operations."
    acceptance_criteria:
      - "Application handles DB operations without blocking the event loop."

  - id: 117
    task_id: QA-06
    epic: "Phase 2: Stability"
    title: "Add tests for CLI and tool error cases"
    description: "Expand pytest suite to cover CLI commands and error conditions in tool integrations."
    component: testing
    area: Quality
    dependencies: [68]
    priority: 2
    status: pending
    assigned_to: null
    command: null
    actionable_steps:
      - "Write tests that invoke CLI with invalid arguments."
      - "Simulate failures in calendar and notification tools."
    acceptance_criteria:
      - "CLI and tool error paths are executed in tests and pass."

  - id: 118
    task_id: LOG-01
    epic: "Phase 2: Stability"
    title: "Standardize logging across modules"
    description: "Replace print statements with the configured logger and add structured logs in core components."
    component: server
    area: Monitoring
    dependencies: []
    priority: 2
    status: pending
    assigned_to: null
    command: null
    actionable_steps:
      - "Audit for print statements and convert to logger usage."
      - "Add context-rich logs to server, agents, and tools."
    acceptance_criteria:
      - "All modules use the logging_config logger."
      - "Logs include relevant context for debugging."
