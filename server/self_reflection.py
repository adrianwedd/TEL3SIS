from typing import Any


from server.settings import Settings
from server.cache import redis_cache
from loguru import logger
from util import call_with_retries

__all__ = ["generate_self_critique"]


@redis_cache(ttl=3600)
def generate_self_critique(transcript: str, *, client: Any | None = None) -> str:
    """Return a short self-critique generated by an LLM."""

    api_key = Settings().openai_api_key
    if client is None:
        if not api_key:
            return ""
        try:
            from openai import OpenAI

            client = OpenAI(api_key=api_key)
        except Exception as exc:  # noqa: BLE001
            logger.error("Failed to init OpenAI client: %s", exc)
            return ""

    try:
        resp = call_with_retries(
            client.chat.completions.create,
            model=Settings().openai_model,
            messages=[
                {
                    "role": "system",
                    "content": (
                        "You are a monitoring agent generating a short critique "
                        "about the previous call. Comment on helpfulness and "
                        "any failures."
                    ),
                },
                {"role": "user", "content": transcript},
            ],
            max_tokens=100,
            temperature=0,
            timeout=10,
        )
        return resp["choices"][0]["message"]["content"].strip()
    except Exception as exc:  # noqa: BLE001
        logger.error("Self-reflection failed: %s", exc)
        return ""
